##############
## Types
##############

type User {
  email: String
  fName: String
  lName: String
  userName: String
  phone: String
  gender: String
  image: String
  dateOfBirth: String
  isEmailVerified:Boolean
  timezone: String
  isPhoneVerified: Boolean  
  registrationCompleted: Boolean
  rating: Int
  role: Role
}

type getUserRes {
  response: Response
  user: User
}
type getStatisticsRes {
  response: Response
  statistics:Statistics
}
type Statistics {
  totalUsers: Int
  totalInstructors: Int
  totalStudents: Int
  totalCourses: Int
  totalEnrollments:Int
  totalRevenue:String
}

##############
## Input Types
##############

input userInput {
  email: String
  image: String
  fName: String
  lName: String
  userName: String
  password: String
  phone: String
  gender: String
  dateOfBirth: String
  timezone: String
  role: Role
}

input userUpdateInput {
  fName: String
  lName: String
  userName: String
  password: String
  phone: String
  gender: String
  dateOfBirth: String
  timezone: String
  role: Role
}
enum Role {
  INSTRUCTOR
  ADMIN
  STUDENT
}
##############
##  Queries
##############

type Query {
  getUserByEmail(email: String): getUserRes
  getStatistics: getStatisticsRes
}

##############
##  Mutations
##############

type Mutation {
  createUser(user: userInput): Response
  updateUser(user: userUpdateInput): Response
  enrollInCourse( studentEmail:String courseId: String): Response
}
